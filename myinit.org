
#+STARTUP: overview

* interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

#+RESULTS:
: revert-buffer

* try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

#+RESULTS:

* which key
  Brings up some help
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

#+RESULTS:
: t

* Org mode
  Org bullets makes things look pretty
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :pin org)

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode))

  (custom-set-variables
   '(org-directory "~/Dropbox/orgfiles")
   '(org-default-notes-file (concat org-directory "/notes.org"))
   '(org-export-html-postamble nil)
   '(org-hide-leading-stars t)
   '(org-startup-folded (quote overview))
   '(org-startup-indented t)
   )

    (setq org-file-apps
          (append '(
                    ("\\.pdf\\'" . "evince %s")
                    ("\\.x?html?\\'" . "/usr/bin/firefox %s")
                    ) org-file-apps ))

  (global-set-key "\C-ca" 'org-agenda)

  (setq org-agenda-start-on-weekday nil)
  (setq org-agenda-custom-commands
       '(("c" "Simple agenda view"
          ((agenda "")
           (alltodo "")))))
  (global-set-key (kbd "C-c c") 'org-capture)

  (setq org-agenda-files (list "~/Dropbox/orgfiles/gcal.org"
                               "~/Dropbox/orgfiles/i.org"
                               "~/Dropbox/orgfiles/schedule.org"))

    (setq org-capture-templates
          '(("a" "Appointment" entry (file  "~/Dropbox/orgfiles/gcal.org" )
             "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
            ("l" "Link" entry (file+headline "~/Dropbox/orgfiles/links.org" "Links")
             "* %? %^L %^g \n%T" :prepend t)
            ("b" "Blog idea" entry (file+headline "~/Dropbox/orgfiles/i.org" "Blog Topics:")
             "* %?\n%T" :prepend t)
            ("t" "To Do Item" entry (file+headline "~/Dropbox/orgfiles/i.org" "To Do and Notes")
             "* TODO %?\n%u" :prepend t)
            ("m" "Mail To Do" entry (file+headline "~/Dropbox/orgfiles/i.org" "To Do and Notes")
             "* TODO %a\n %?" :prepend t)
            ("g" "GMail To Do" entry (file+headline "~/Dropbox/orgfiles/i.org" "To Do and Notes")
             "* TODO %^L\n %?" :prepend t)
            ("n" "Note" entry (file+headline "~/Dropbox/orgfiles/i.org" "Notes")
             "* %u %? " :prepend t)
            ))
  

    (defadvice org-capture-finalize 
        (after delete-capture-frame activate)  
      "Advise capture-finalize to close the frame"  
      (if (equal "capture" (frame-parameter nil 'name))  
          (delete-frame)))

    (defadvice org-capture-destroy 
        (after delete-capture-frame activate)  
      "Advise capture-destroy to close the frame"  
      (if (equal "capture" (frame-parameter nil 'name))  
          (delete-frame)))  

    (use-package noflet
      :ensure t )
    (defun make-capture-frame ()
      "Create a new frame and run org-capture."
      (interactive)
      (make-frame '((name . "capture")))
      (select-frame-by-name "capture")
      (delete-other-windows)
      (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
        (org-capture)))
;; (require 'ox-beamer)
;; for inserting inactive dates
    (define-key org-mode-map (kbd "C-c >") (lambda () (interactive (org-time-stamp-inactive))))

    (use-package htmlize :ensure t)

    (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")


  (add-to-list 'safe-local-variable-values
               '(after-save-hook . org-latex-preview))
#+END_SRC

#+RESULTS:
: ((after-save-hook . org-latex-preview) (after-save-hook . org-latex-preview))

* Ace windows for easy window switching
#+BEGIN_SRC emacs-lisp
 (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inherit ace-jum-face-foreground :height 3.0)))))))
#+END_SRC

* Swiper / Ivy / Counsel
  Swiper gives us a really efficient incremental search with regular expressions and Ivy/Counsel replace a lot of ido or helms completion functionality
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line))
    )

   (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "%d/%d")
      (setq ivy-display-style 'fancy))

    (use-package swiper
      :ensure t
      :bind (("C-s" . swiper)
	     ("C-r" . swiper)
	     ("C-c C-r" . ivy-resume)
	     ("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)))
#+END_SRC 
* Avy - navigate by searching for a letter on the screen and jumping to it
See https://github.com/abo-abo/avy for more info
#+BEGIN_SRC emacs-lisp
   (use-package avy
      :ensure t
      :bind ("M-s" . avy-goto-char-2))
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
;; pip install jedi epc
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (global-company-mode t))

  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)
  (use-package company-jedi
    :ensure t
    :config
    (add-hook 'python-mode-hook 'jedi:setup))

  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)

#+END_SRC

#+RESULTS:
| jedi:setup | my/python-mode-hook |

* the rest
#+BEGIN_SRC emacs-lisp
  (setq indo-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)

  (defalias 'list-buffers 'ibuffer)

  (use-package tabbar
    :ensure t
    :config
    (tabbar-mode 1))

  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)))

  ;; (use-package color-theme
  ;;  :ensure t)

  ;; (use-package zenburn-theme
  ;;   :ensure t
  ;;   :config (load-theme 'zenburn t))

  (use-package htmlize
    :ensure t)
#+END_SRC

#+RESULTS:

* Reveal.js
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure ox-reveal)

  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal-mathjax t)
#+END_SRC

#+RESULTS:
: t

* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))

#+END_SRC

#+RESULTS:

* Python
#+BEGIN_SRC emacs-lisp
  (setq py-python-command "/usr/bin/python3")
  (setq python-shell-interpreter "python3")
  (setq elpy-rpc-python-command "python3")
  (setq jedi:environment-root "jedi")
  (setq jedi:environment-virtualenv
	(append python-environment-virtualenv
		'("--python" "/usr/bin/python3")))

  (use-package elpy
    :ensure t
    :custom (elpy-rpc-backend "jedi")
    :config
    (elpy-enable))

  (use-package virtualenvwrapper
    :ensure t
    :config
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell))
#+END_SRC

#+RESULTS:
: t

* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))

#+END_SRC

#+RESULTS:

* Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))

#+END_SRC

#+RESULTS:

* Misc packages
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)

;;  (use-package beacon
;;    :ensure t
;;    :config
;;    (beacon-mode 1))


  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))

  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))


  (use-package multiple-cursors
    :ensure t)

  (setq save-interprogram-paste-before-kill t)



#+END_SRC

#+RESULTS:

* iedit and narrow / widen dwin
#+BEGIN_SRC emacs-lisp
    ;; C-;
  (use-package iedit
    :ensure t) 

  ; if you're windened, narrow to the region, if you're narrowed, widen
  ; bound to C-x n
  (defun narrow-or-widen-dwim (p)
  "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
  Intelligently means: region, org-src-block, org-subtree, or defun,
  whichever applies first.
  Narrowing to org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer is already
  narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
  ((region-active-p)
  (narrow-to-region (region-beginning) (region-end)))
  ((derived-mode-p 'org-mode)
  ;; `org-edit-src-code' is not a real narrowing command.
  ;; Remove this first conditional if you don't want it.
  (cond ((ignore-errors (org-edit-src-code))
  (delete-other-windows))
  ((org-at-block-p)
  (org-narrow-to-block))
  (t (org-narrow-to-subtree))))
  (t (narrow-to-defun))))

  ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing keymap, that's
  ;; how much I like this command. Only copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
#+END_SRC

#+RESULTS:
: narrow-or-widen-dwim

* evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t ;; install the evil package if not installed
    :init ;; tweak evil's configuration before loading it
    (setq evil-search-module 'evil-search)
    (setq evil-ex-complete-emacs-commands nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-shift-round nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-keybinding nil)
    :config ;; tweak evil after loading it
    (evil-mode)

    ;; example how to map a command in normal mode (called 'normal state' in evil)
    (define-key evil-normal-state-map (kbd ", w") 'evil-window-vsplit))
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  ;; gl and gL operators, like vim-lion
    (use-package evil-lion
      :ensure t
      :bind (:map evil-normal-state-map
		  ("g l " . evil-lion-left)
		  ("g L " . evil-lion-right)
		  :map evil-visual-state-map
		  ("g l " . evil-lion-left)
		  ("g L " . evil-lion-right)))

    ;; gc operator, like vim-commentary
    (use-package evil-commentary
      :ensure t
      :bind (:map evil-normal-state-map
		  ("gc" . evil-commentary)))

    ;; gx operator, like vim-exchange
    ;; NOTE using cx like vim-exchange is possible but not as straightforward
    (use-package evil-exchange
      :ensure t
      :bind (:map evil-normal-state-map
		  ("gx" . evil-exchange)
		  ("gX" . evil-exchange-cancel)))

    ;; gr operator, like vim's ReplaceWithRegister
    (use-package evil-replace-with-register
      :ensure t
      :bind (:map evil-normal-state-map
		  ("gr" . evil-replace-with-register)
		  :map evil-visual-state-map
		  ("gr" . evil-replace-with-register)))
  ;; gl and gL operators, like vim-lion
    (use-package evil-lion
      :ensure t
      :bind (:map evil-normal-state-map
		  ("g l " . evil-lion-left)
		  ("g L " . evil-lion-right)
		  :map evil-visual-state-map
		  ("g l " . evil-lion-left)
		  ("g L " . evil-lion-right)))

    ;; gc operator, like vim-commentary
    (use-package evil-commentary
      :ensure t
      :bind (:map evil-normal-state-map
		  ("gc" . evil-commentary)))

    ;; gx operator, like vim-exchange
    ;; NOTE using cx like vim-exchange is possible but not as straightforward
    (use-package evil-exchange
      :ensure t
      :bind (:map evil-normal-state-map
		  ("gx" . evil-exchange)
		  ("gX" . evil-exchange-cancel)))

    ;; gr operator, like vim's ReplaceWithRegister
    (use-package evil-replace-with-register
      :ensure t
      :bind (:map evil-normal-state-map
		  ("gr" . evil-replace-with-register)
		  :map evil-visual-state-map
		  ("gr" . evil-replace-with-register)))
  ;; gl and gL operators, like vim-lion
    (use-package evil-lion
      :ensure t
      :bind (:map evil-normal-state-map
		  ("g l " . evil-lion-left)
		  ("g L " . evil-lion-right)
		  :map evil-visual-state-map
		  ("g l " . evil-lion-left)
		  ("g L " . evil-lion-right)))

    ;; gc operator, like vim-commentary
    (use-package evil-commentary
      :ensure t
      :bind (:map evil-normal-state-map
		  ("gc" . evil-commentary)))

    ;; gx operator, like vim-exchange
    ;; NOTE using cx like vim-exchange is possible but not as straightforward
    (use-package evil-exchange
      :ensure t
      :bind (:map evil-normal-state-map
		  ("gx" . evil-exchange)
		  ("gX" . evil-exchange-cancel)))

    ;; gr operator, like vim's ReplaceWithRegister
    (use-package evil-replace-with-register
      :ensure t
      :bind (:map evil-normal-state-map
		  ("gr" . evil-replace-with-register)
		  :map evil-visual-state-map
		  ("gr" . evil-replace-with-register)))
  ;; * operator in vusual mode
    (use-package evil-visualstar
      :ensure t
      :bind (:map evil-visual-state-map
		  ("*" . evil-visualstar/begin-search-forward)
		  ("#" . evil-visualstar/begin-search-backward)))

    ;; ex commands, which a vim user is likely to be familiar with
    (use-package evil-expat
      :ensure t
      :defer t)

    ;; visual hints while editing
    (use-package evil-goggles
      :ensure t
      :config
      (evil-goggles-use-diff-faces)
      (evil-goggles-mode))

  ;; * operator in vusual mode
    (use-package evil-visualstar
      :ensure t
      :bind (:map evil-visual-state-map
		  ("*" . evil-visualstar/begin-search-forward)
		  ("#" . evil-visualstar/begin-search-backward)))

    ;; ex commands, which a vim user is likely to be familiar with
    (use-package evil-expat
      :ensure t
      :defer t)

    ;; visual hints while editing
    (use-package evil-goggles
      :ensure t
      :config
      (evil-goggles-use-diff-faces)
      (evil-goggles-mode))
  ;; like vim-surround
    (use-package evil-surround
      :ensure t
      :commands
      (evil-surround-edit
       evil-Surround-edit
       evil-surround-region
       evil-Surround-region)
      :init
      (evil-define-key 'operator global-map "s" 'evil-surround-edit)
      (evil-define-key 'operator global-map "S" 'evil-Surround-edit)
      (evil-define-key 'visual global-map "S" 'evil-surround-region)
      (evil-define-key 'visual global-map "gS" 'evil-Surround-region))

  (use-package evil-escape
    :ensure t
    :config
    (progn
      (evil-escape-mode t)
      (setq-default evil-escape-key-sequence "jk")))
#+END_SRC

#+RESULTS:
: t


* Better Shell
#+BEGIN_SRC emacs-lisp
  (use-package better-shell
    :ensure t
    :bind (("C-\"" . better-shell-shell)
	   ("C-:" . better-shell-remote-open)))
#+END_SRC

#+RESULTS:
: better-shell-remote-open

* Backup files
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )
#+END_SRC

* font
#+BEGIN_SRC emacs-lisp
(defun qiang-font-existsp (font)
  (if (null (x-list-fonts font))
      nil t))

(defun qiang-make-font-string (font-name font-size)
  (if (and (stringp font-size)
           (equal ":" (string (elt font-size 0))))
      (format "%s%s" font-name font-size)
    (format "%s-%s" font-name font-size)))

(defvar bhj-english-font-size nil)
(defun qiang-set-font (english-fonts
                       english-font-size
                       chinese-fonts
                       &optional chinese-fonts-scale
                       )
  (setq chinese-fonts-scale (or chinese-fonts-scale 1.2))
  (save-excursion
    (with-current-buffer (find-file-noselect "~/.config/system-config/emacs-font-size")
      (delete-region (point-min) (point-max))
      (insert (format "%s" english-font-size))
      (let ((before-save-hook nil)
            (after-save-hook nil))
        (save-buffer))
      (kill-buffer)))
  (setq face-font-rescale-alist `(("Microsoft Yahei" . ,chinese-fonts-scale)
                                  ("Microsoft_Yahei" . ,chinese-fonts-scale)
                                  ("微软雅黑" . ,chinese-fonts-scale)
                                  ("WenQuanYi Zen Hei" . ,chinese-fonts-scale)))
  "english-font-size could be set to \":pixelsize=18\" or a integer.
If set/leave chinese-font-size to nil, it will follow english-font-size"
  (require 'cl)                         ; for find if
  (setq bhj-english-font-size english-font-size)
  (let ((en-font (qiang-make-font-string
                  (find-if #'qiang-font-existsp english-fonts)
                  english-font-size))
        (zh-font (font-spec :family (find-if #'qiang-font-existsp chinese-fonts))))

    ;; Set the default English font
    ;;
    ;; The following 2 method cannot make the font settig work in new frames.
    ;; (set-default-font "Consolas:pixelsize=18")
    ;; (add-to-list 'default-frame-alist '(font . "Consolas:pixelsize=18"))
    ;; We have to use set-face-attribute
    (set-face-attribute
     'default nil :font en-font)
    (condition-case font-error
        (progn
          (set-face-font 'italic (font-spec :family "JetBrains Mono" :slant 'italic :weight 'normal :size (+ 0.0 english-font-size)))
          (set-face-font 'bold-italic (font-spec :family "JetBrains Mono" :slant 'italic :weight 'bold :size (+ 0.0 english-font-size)))

          (set-fontset-font t 'symbol (font-spec :family "JetBrains Mono")))
      (error nil))
    (set-fontset-font t 'symbol (font-spec :family "Unifont") nil 'append)
    (set-fontset-font t nil (font-spec :family "DejaVu Sans"))

    ;; Set Chinese font
    ;; Do not use 'unicode charset, it will cause the english font setting invalid
    (dolist (charset '(kana han cjk-misc bopomofo))
      (set-fontset-font t charset zh-font)))
  (when (and (boundp 'global-emojify-mode)
             global-emojify-mode)
    (global-emojify-mode 1))
  (shell-command-to-string "sawfish-client -e '(maximize-window (input-focus))'&"))


(defvar bhj-english-fonts '("JetBrains Mono" "Monaco" "Consolas" "DejaVu Sans Mono" "Monospace" "Courier New"))
(defvar bhj-chinese-fonts '("Microsoft Yahei" "Microsoft_Yahei" "微软雅黑" "文泉驿等宽微米黑" "黑体" "新宋体" "宋体"))

(qiang-set-font
 bhj-english-fonts
 (if (file-exists-p "~/.config/system-config/emacs-font-size")
     (save-excursion
       (find-file "~/.config/system-config/emacs-font-size")
       (goto-char (point-min))
       (let ((monaco-font-size (read (current-buffer))))
         (kill-buffer (current-buffer))
         (if (numberp monaco-font-size)
             monaco-font-size
           12.5)))
   12.5)
 bhj-chinese-fonts)

(defvar chinese-font-size-scale-alist nil)

;; On different platforms, I need to set different scaling rate for
;; differnt font size.
(cond
 ((and (boundp '*is-a-mac*) *is-a-mac*)
  (setq chinese-font-size-scale-alist '((10.5 . 1.3) (11.5 . 1.3) (16 . 1.3) (18 . 1.25))))
 ((and (boundp '*is-a-win*) *is-a-win*)
  (setq chinese-font-size-scale-alist '((11.5 . 1.25) (16 . 1.25))))
 (t ;; is a linux:-)
  (setq chinese-font-size-scale-alist '((12 . 1.25) (12.5 . 1.25) (14 . 1.20) (16 . 1.25) (20 . 1.20)))))

(defvar bhj-english-font-size-steps '(9 10.5 11.5 12 12.5 13 14 16 18 20 22 40))
(defun bhj-step-frame-font-size (step)
  (let ((steps bhj-english-font-size-steps)
        next-size)
    (when (< step 0)
        (setq steps (reverse bhj-english-font-size-steps)))
    (setq next-size
          (cadr (member bhj-english-font-size steps)))
    (when next-size
        (qiang-set-font bhj-english-fonts next-size bhj-chinese-fonts (cdr (assoc next-size chinese-font-size-scale-alist)))
        (message "Your font size is set to %.1f" next-size))))

(global-set-key [(control x) (meta -)] (lambda () (interactive) (bhj-step-frame-font-size -1)))
(global-set-key [(control x) (meta +)] (lambda () (interactive) (bhj-step-frame-font-size 1)))

(set-face-attribute 'default nil :font (font-spec))
#+END_SRC

* Themes and modeline
#+BEGIN_SRC emacs-lisp
    (use-package doom-modeline
      :ensure t
      :init (doom-modeline-mode 1)
      :config 
      (progn
        (set-face-attribute 'mode-line nil :family "Noto Sans" :height 100)
        (set-face-attribute 'mode-line-inactive nil :family "Noto Sans" :height 100)
        ))

    (use-package doom-themes
      :init
      (load-theme 'doom-dark+ t)
      :config
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
            doom-themes-enable-italic t) ; if nil, italics is universally disabled

      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)

      ;; Enable custom neotree theme (all-the-icons must be installed!)
      (doom-themes-neotree-config)
      ;; or for treemacs users
      (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
      (doom-themes-treemacs-config)

      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config))

#+END_SRC

* Hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra 
    :ensure hydra
    :init 
    (global-set-key
    (kbd "C-x t")
	    (defhydra toggle (:color blue)
	      "toggle"
	      ("a" abbrev-mode "abbrev")
	      ("s" flyspell-mode "flyspell")
	      ("d" toggle-debug-on-error "debug")
	      ("c" fci-mode "fCi")
	      ("f" auto-fill-mode "fill")
	      ("t" toggle-truncate-lines "truncate")
	      ("w" whitespace-mode "whitespace")
	      ("q" nil "cancel")))
    (global-set-key
     (kbd "C-x j")
     (defhydra gotoline 
       ( :pre (linum-mode 1)
	      :post (linum-mode -1))
       "goto"
       ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
       ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
       ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
       ("e" (lambda () (interactive)(end-of-buffer)) "end")
       ("c" recenter-top-bottom "recenter")
       ("n" next-line "down")
       ("p" (lambda () (interactive) (forward-line -1))  "up")
       ("g" goto-line "goto-line")
       ))
    (global-set-key
     (kbd "C-c t")
     (defhydra hydra-global-org (:color blue)
       "Org"
       ("t" org-timer-start "Start Timer")
       ("s" org-timer-stop "Stop Timer")
       ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
       ("p" org-timer "Print Timer") ; output timer value to buffer
       ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
       ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
       ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
       ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
	     ("l" (or )rg-capture-goto-last-stored "Last Capture"))

     ))

(defhydra hydra-multiple-cursors (:hint nil)
  "
 Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
------------------------------------------------------------------
 [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
 [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
 [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
 [Click] Cursor at point       [_q_] Quit"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("s" mc/mark-all-in-region-regexp :exit t)
  ("0" mc/insert-numbers :exit t)
  ("A" mc/insert-letters :exit t)
  ("<mouse-1>" mc/add-cursor-on-click)
  ;; Help with click recognition in this hydra
  ("<down-mouse-1>" ignore)
  ("<drag-mouse-1>" ignore)
  ("q" nil)


  ("<mouse-1>" mc/add-cursor-on-click)
  ("<down-mouse-1>" ignore)
  ("<drag-mouse-1>" ignore))

#+END_SRC
* git
#+BEGIN_SRC emacs-lisp
   (use-package magit
      :ensure t
      :init
      (progn
      (bind-key "C-x g" 'magit-status)
      ))

  (setq magit-status-margin
    '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))
      (use-package git-gutter
      :ensure t
      :init
      (global-git-gutter-mode +1))

      (global-set-key (kbd "M-g M-g") 'hydra-git-gutter/body)


      (use-package git-timemachine
      :ensure t
      )
    (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                                :hint nil)
      "
    Git gutter:
      _j_: next hunk        _s_tage hunk     _q_uit
      _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
      ^ ^                   _p_opup hunk
      _h_: first hunk
      _l_: last hunk        set start _R_evision
    "
      ("j" git-gutter:next-hunk)
      ("k" git-gutter:previous-hunk)
      ("h" (progn (goto-char (point-min))
                  (git-gutter:next-hunk 1)))
      ("l" (progn (goto-char (point-min))
                  (git-gutter:previous-hunk 1)))
      ("s" git-gutter:stage-hunk)
      ("r" git-gutter:revert-hunk)
      ("p" git-gutter:popup-hunk)
      ("R" git-gutter:set-start-revision)
      ("q" nil :color blue)
      ("Q" (progn (git-gutter-mode -1)
                  ;; git-gutter-fringe doesn't seem to
                  ;; clear the markup right away
                  (sit-for 0.1)
                  (git-gutter:clear))
           :color blue))
#+END_SRC

* 3rd
#+BEGIN_SRC emacs-lisp
;; Emacs "updates" its ui more often than it needs to, so we slow it down
;; slightly, from 0.5s:
(setq idle-update-delay 1)
#+END_SRC
